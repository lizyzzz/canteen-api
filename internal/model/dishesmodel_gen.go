// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dishesFieldNames          = builder.RawFieldNames(&Dishes{})
	dishesRows                = strings.Join(dishesFieldNames, ",")
	dishesRowsExpectAutoSet   = strings.Join(stringx.Remove(dishesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dishesRowsWithPlaceHolder = strings.Join(stringx.Remove(dishesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	dishesModel interface {
		Insert(ctx context.Context, data *Dishes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Dishes, error)
		Update(ctx context.Context, data *Dishes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDishesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Dishes struct {
		Id          int64   `db:"id"`
		Name        string  `db:"name"`
		Price       float64 `db:"price"`
		Category    string  `db:"category"`
		Ingredients string  `db:"ingredients"`
		ImageUrl    string  `db:"image_url"`
	}
)

func newDishesModel(conn sqlx.SqlConn) *defaultDishesModel {
	return &defaultDishesModel{
		conn:  conn,
		table: "`dishes`",
	}
}

func (m *defaultDishesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDishesModel) FindOne(ctx context.Context, id int64) (*Dishes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dishesRows, m.table)
	var resp Dishes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDishesModel) Insert(ctx context.Context, data *Dishes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, dishesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Price, data.Category, data.Ingredients, data.ImageUrl)
	return ret, err
}

func (m *defaultDishesModel) Update(ctx context.Context, data *Dishes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dishesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Price, data.Category, data.Ingredients, data.ImageUrl, data.Id)
	return err
}

func (m *defaultDishesModel) tableName() string {
	return m.table
}
