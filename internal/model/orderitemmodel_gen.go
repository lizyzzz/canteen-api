// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderItemFieldNames          = builder.RawFieldNames(&OrderItem{})
	orderItemRows                = strings.Join(orderItemFieldNames, ",")
	orderItemRowsExpectAutoSet   = strings.Join(stringx.Remove(orderItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderItemRowsWithPlaceHolder = strings.Join(stringx.Remove(orderItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderItemModel interface {
		Insert(ctx context.Context, data *OrderItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderItem, error)
		Update(ctx context.Context, data *OrderItem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderItemModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderItem struct {
		Id        int64           `db:"id"`
		OrderId   int64           `db:"order_id"`
		DishId    int64           `db:"dish_id"`
		DishName  string          `db:"dish_name"`
		UnitPrice float64         `db:"unit_price"`
		Quantity  uint64          `db:"quantity"`
		Subtotal  sql.NullFloat64 `db:"subtotal"`
	}
)

func newOrderItemModel(conn sqlx.SqlConn) *defaultOrderItemModel {
	return &defaultOrderItemModel{
		conn:  conn,
		table: "`order_item`",
	}
}

func (m *defaultOrderItemModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderItemModel) FindOne(ctx context.Context, id int64) (*OrderItem, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemRows, m.table)
	var resp OrderItem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderItemModel) Insert(ctx context.Context, data *OrderItem) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, orderItemRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.DishId, data.DishName, data.UnitPrice, data.Quantity, data.Subtotal)
	return ret, err
}

func (m *defaultOrderItemModel) Update(ctx context.Context, data *OrderItem) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderItemRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.DishId, data.DishName, data.UnitPrice, data.Quantity, data.Subtotal, data.Id)
	return err
}

func (m *defaultOrderItemModel) tableName() string {
	return m.table
}
